// カスタム日本語フォント - デバッグ版
// 手動作成の安全なフォントデータ
// 8x16ピクセル ビットマップフォント
#pragma once
#include <stdint.h>
#include <Arduino.h>  // PROGMEM定義のため

// フォント設定
#define CUSTOM_FONT_WIDTH  8
#define CUSTOM_FONT_HEIGHT 16
#define CUSTOM_FONT_COUNT  15

// フォントビットマップデータ構造体
struct FontChar {
    uint16_t unicode;      // Unicode文字コード
    uint8_t bitmap[16];    // 8x16ビットマップデータ
};

// シンプルな日本語文字セット（デバッグ用）
const FontChar custom_japanese_font[] PROGMEM = {
    //   (0x0020)
    {0x0020, {
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // ! (0x0021)
    {0x0021, {
        0x00, 0x00, 0x18, 0x18, 
        0x18, 0x18, 0x18, 0x00, 
        0x18, 0x18, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // A (0x0041)
    {0x0041, {
        0x00, 0x00, 0x18, 0x24, 
        0x24, 0x42, 0x7E, 0x42, 
        0x42, 0x42, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // あ (0x3042)
    {0x3042, {
        0x00, 0x00, 0x1C, 0x20, 
        0x18, 0x24, 0x24, 0x24, 
        0x24, 0x1C, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // い (0x3044)
    {0x3044, {
        0x00, 0x00, 0x08, 0x08, 
        0x08, 0x08, 0x08, 0x08, 
        0x08, 0x1C, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // う (0x3046)
    {0x3046, {
        0x00, 0x00, 0x1C, 0x20, 
        0x20, 0x1C, 0x02, 0x02, 
        0x22, 0x1C, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // か (0x304B)
    {0x304B, {
        0x00, 0x00, 0x20, 0x20, 
        0x3E, 0x20, 0x20, 0x22, 
        0x22, 0x1C, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // こ (0x3053)
    {0x3053, {
        0x00, 0x00, 0x3E, 0x02, 
        0x02, 0x02, 0x02, 0x02, 
        0x22, 0x1C, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // ん (0x3093)
    {0x3093, {
        0x00, 0x00, 0x22, 0x22, 
        0x22, 0x22, 0x22, 0x32, 
        0x2A, 0x26, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // に (0x306B)
    {0x306B, {
        0x00, 0x00, 0x3E, 0x02, 
        0x02, 0x1E, 0x02, 0x02, 
        0x02, 0x3E, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // ち (0x3061)
    {0x3061, {
        0x00, 0x00, 0x04, 0x04, 
        0x04, 0x3E, 0x04, 0x04, 
        0x0C, 0x30, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // は (0x306F)
    {0x306F, {
        0x00, 0x00, 0x08, 0x08, 
        0x14, 0x14, 0x22, 0x22, 
        0x22, 0x1C, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // 日 (0x65E5)
    {0x65E5, {
        0x00, 0x00, 0x1E, 0x12, 
        0x12, 0x1E, 0x12, 0x12, 
        0x12, 0x1E, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // 本 (0x672C)
    {0x672C, {
        0x00, 0x00, 0x08, 0x08, 
        0x08, 0x3E, 0x08, 0x08, 
        0x14, 0x22, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }},

    // 語 (0x8A9E)
    {0x8A9E, {
        0x00, 0x00, 0x3E, 0x24, 
        0x24, 0x3E, 0x24, 0x24, 
        0x3E, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00
    }}

};

const uint16_t custom_japanese_font_count = sizeof(custom_japanese_font) / sizeof(FontChar);

// フォント検索・描画関数の宣言
const FontChar* findFontChar(uint16_t unicode);
void drawCustomChar(int x, int y, uint16_t unicode, uint16_t color);
void drawCustomString(int x, int y, const char* str, uint16_t color);
void drawFallbackString(int x, int y, const char* str, uint16_t color);
void displayFontStats();

// UTF-8解析関数
uint16_t utf8ToUnicode(const char* utf8, int& byteCount);
