#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
フォントファイルをC言語ヘッダーファイルに変換するスクリプト
TTF/OTFフォントを配列データとして組み込み用に変換
"""

import sys
import os

def convert_font_to_header(font_path, output_path, array_name):
    """
    フォントファイルをC言語ヘッダーファイルに変換
    
    Args:
        font_path (str): 入力フォントファイルパス
        output_path (str): 出力ヘッダーファイルパス  
        array_name (str): C配列の変数名
    """
    try:
        with open(font_path, 'rb') as f:
            font_data = f.read()
        
        # ヘッダーファイル生成
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(f'// Auto-generated font header from {os.path.basename(font_path)}\n')
            f.write(f'// Generated by font_converter.py\n')
            f.write(f'#pragma once\n')
            f.write(f'#include <stdint.h>\n\n')
            
            # フォントサイズ定数
            f.write(f'const uint32_t {array_name}_size = {len(font_data)};\n\n')
            
            # フォントデータ配列
            f.write(f'const uint8_t {array_name}[] PROGMEM = {{\n')
            
            # バイトデータを16進数で出力（16バイトずつ改行）
            for i in range(0, len(font_data), 16):
                chunk = font_data[i:i+16]
                hex_values = [f'0x{byte:02X}' for byte in chunk]
                f.write(f'  {", ".join(hex_values)}')
                
                if i + 16 < len(font_data):
                    f.write(',')
                f.write('\n')
            
            f.write('};\n')
        
        print(f'フォント変換完了: {font_path} -> {output_path}')
        print(f'フォントサイズ: {len(font_data)} bytes')
        
    except Exception as e:
        print(f'エラー: {e}', file=sys.stderr)
        sys.exit(1)

def main():
    if len(sys.argv) != 4:
        print('使用方法: python font_converter.py <input_font> <output_header> <array_name>')
        print('例: python font_converter.py migu-1m-regular.ttf japanese_font.h japanese_font_data')
        sys.exit(1)
    
    font_path = sys.argv[1]
    output_path = sys.argv[2]
    array_name = sys.argv[3]
    
    if not os.path.exists(font_path):
        print(f'エラー: フォントファイルが見つかりません: {font_path}', file=sys.stderr)
        sys.exit(1)
    
    convert_font_to_header(font_path, output_path, array_name)

if __name__ == '__main__':
    main()
